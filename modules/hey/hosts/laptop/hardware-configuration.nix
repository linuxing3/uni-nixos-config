# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  # No bootloader
  boot.loader.grub.enable = false;
  boot.loader.grub.device = "/dev/sdb";
  boot.loader.grub.useOSProber = false;
  boot.loader.grub.extraEntries = ''
    menuentry "NixOS Installer/Rescue" {
      search --set=drive2 --fs-uuid 66F6-957D
      linux ($drive2)/live-bzImage findiso=($drive2)/nixos.iso init=/nix/store/6ljga1i26k7w7qnxpi1nzgg5cfmngxr5-nixos-system-nixos-25.05.804219.36ab78dab7da/init root=LABEL=nixos-minimal-25.05-x86_64 loglevel=4
      initrd ($drive2)/live-initrd
    }
    menuentry "NixOS Unified" --class nixos --unrestricted {
      search --set=drive2 --fs-uuid 66F6-957D
      linux ($drive2)/kernels/dfldf6vkhlyq7jf5ydzqcyjlbkpl2amv-linux-zen-6.14.5-bzImage init=/nix/store/iyz7py77j8x9qqvg6kpnac9iips0r6zq-nixos-system-laptop-25.05.20250508.dda3dcd/init loglevel=4
      initrd ($drive2)/kernels/dwd8y8gqyfdd1k8ssip064fmhqrhf3bv-initrd-linux-zen-6.14.5-initrd
    }
  '';

  boot.kernelPackages = pkgs.linuxPackages_latest;

  boot.initrd.availableKernelModules = ["xhci_pci" "ahci" "nvme" "usbhid" "usb_storage" "sd_mod"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-intel"]; # kvm virtualization support
  boot.extraModprobeConfig = "options kvm_intel nested=1"; # for intel cpu
  boot.extraModulePackages = [];
  # clear /tmp on boot to get a stateless /tmp directory.
  boot.tmp.cleanOnBoot = true;

  # Enable binfmt emulation of aarch64-linux, this is required for cross compilation.
  boot.binfmt.emulatedSystems = ["aarch64-linux" "riscv64-linux"];
  # supported file systems, so we can mount any removable disks with these filesystems
  boot.supportedFilesystems = [
    "ext4"
    "btrfs"
    "xfs"
    "ntfs"
    "fat"
    "vfat"
    "exfat"
  ];

  boot.initrd = {
    luks.devices."crypted-nixos" = {
      device = "/dev/disk/by-uuid/2ae9170b-74e6-497f-819a-402d2697a01f";
      allowDiscards = true;
      bypassWorkqueues = true;
    };
  };

  # equal to `mount -t tmpfs tmpfs /`
  fileSystems."/" = {
    device = "tmpfs";
    fsType = "tmpfs";
    # set mode to 755, otherwise systemd will set it to 777, which cause problems.
    # relatime: Update inode access times relative to modify or change time.
    options = ["relatime" "mode=755"];
  };

  # last partition as boot, device = "/dev/sdb2";
  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/66F6-957D";
    fsType = "vfat";
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/bc51540f-f085-44a3-ad6c-46bf2e138f6b";
    fsType = "btrfs";
    options = ["subvol=@nix" "noatime" "compress-force=zstd:1"];
  };

  fileSystems."/gnu" = {
    device = "/dev/disk/by-uuid/bc51540f-f085-44a3-ad6c-46bf2e138f6b";
    fsType = "btrfs";
    options = ["subvol=@guix" "noatime" "compress-force=zstd:1"];
  };

  fileSystems."/tmp" = {
    device = "/dev/disk/by-uuid/bc51540f-f085-44a3-ad6c-46bf2e138f6b";
    fsType = "btrfs";
    options = ["subvol=@tmp" "noatime" "compress-force=zstd:1"];
  };

  fileSystems."/swap" = {
    device = "/dev/disk/by-uuid/bc51540f-f085-44a3-ad6c-46bf2e138f6b";
    fsType = "btrfs";
    options = ["subvol=@swap" "rw"];
  };

  fileSystems."/persistent" = {
    device = "/dev/disk/by-uuid/bc51540f-f085-44a3-ad6c-46bf2e138f6b";
    fsType = "btrfs";
    options = ["subvol=@persistent" "noatime" "compress-force=zstd:1"];
    neededForBoot = true;
  };

  fileSystems."/snapshots" = {
    device = "/dev/disk/by-uuid/bc51540f-f085-44a3-ad6c-46bf2e138f6b";
    fsType = "btrfs";
    options = ["subvol=@snapshots" "noatime" "compress-force=zstd:1"];
  };

  # remount swapfile in read-write mode
  fileSystems."/swap/swapfile" = {
    # the swapfile is located in /swap subvolume, so we need to mount /swap first.
    depends = ["/swap"];
    device = "/swap/swapfile";
    fsType = "none";
    options = ["bind" "rw"];
  };

  swapDevices = [
    {device = "/swap/swapfile";}
  ];

  networking.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
